-- Query the sport and distinct number of athletes
SELECT 
	sport, 
    count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY sport
-- Only include the 3 sports with the most athletes
ORDER BY athletes desc
LIMIT 3;

-- Query sport, events, and athletes from summer_games
SELECT 
	sport, 
    count(DISTINCT event) AS events, 
    count(DISTINCT athlete_id) AS athletes
FROM summer_games
GROUP BY sport;

-----------------------------------------------------------
-- Select the age of the oldest athlete for each region
SELECT 
	c.region, 
    Max(a.age) AS age_of_oldest_athlete
FROM summer_games s
-- First JOIN statement
JOIN countries c
ON c.id=s.country_id
-- Second JOIN statement
JOIN athletes a
ON s.athlete_id = a.id
GROUP BY c.region;

-------------------------------------------------------------
-- Select sport and events for summer sports
SELECT 
	distinct sport, 
    count(distinct event) AS events
FROM summer_games
group by sport
UNION
-- Select sport and events for winter sports
SELECT 
	distinct sport, 
    count(distinct event) AS events
FROM winter_games
group by sport
-- Show the most events at the top of the report
order by events desc;

---------------------------------------

-- Pull athlete_name and gold_medals for summer games
SELECT 
	a.name AS athlete_name, 
    SUM(s.gold) AS gold_medals
FROM summer_games AS s
JOIN athletes AS a
ON a.id = s.athlete_id
GROUP BY a.name
-- Filter for only athletes with 3 gold medals or more
HAVING SUM(s.gold) >=3
-- Sort to show the most gold medals at the top
ORDER BY gold_medals desc;

-------------------------------------------------------
-- Query season, country, and events for all summer events
SELECT 
	'summer' AS season, 
    country, 
    count(distinct event) AS events
FROM summer_games AS s
JOIN countries AS c
ON c.id=s.country_id
GROUP BY season, country
-- Combine the queries
UNION ALL
-- Query season, country, and events for all winter events
SELECT 
	'winter' AS season, 
     country, 
    count(distinct event) AS events
FROM winter_games AS w
JOIN countries AS c
ON c.id=w.country_id
GROUP BY season, country
-- Sort the results to show most events at the top
ORDER BY events desc;

---------------------------------------------------------------------
-- Add outer layer to pull season, country and unique events
SELECT 
	season, 
    country, 
    count(distinct event) AS events
FROM
    -- Pull season, country_id, and event for both seasons
    (SELECT 
     	'summer' AS season, 
     	country_id, 
     	event
    FROM summer_games
    UNION ALL
    SELECT 
     	'winter' AS season, 
     	country_id, 
     	event
    FROM winter_games) AS subquery
JOIN countries AS c
ON subquery.country_id = c.id
-- Group by any unaggregated fields
GROUP BY season, country
-- Order to show most events at the top
ORDER BY events desc;

----------------------------------------------

BMI bucket by sport
You are looking to understand how BMI differs by each summer sport. To answer this, set up a report that contains the following:

sport, which is the name of the summer sport
bmi_bucket, which splits up BMI into three groups: <.25, .25-.30, >.30
athletes, or the unique number of athletes
Definition: BMI = 100 * weight / (height squared).

Also note that CASE statements run row-by-row, so the second conditional is only applied if the first conditional is false. This makes it that you do not need an AND statement excluding already-mentioned conditionals.

-- Pull in sport, bmi_bucket, and athletes
SELECT 
	sport,
    -- Bucket BMI in three groups: <.25, .25-.30, and >.30	
    CASE WHEN 100*weight/height^2 <.25 THEN '<.25'
    WHEN 100*weight/height^2 <=.30 THEN '.25-.30'
    WHEN 100*weight/height^2 >.30 THEN '>.30' END AS bmi_bucket,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
-- GROUP BY non-aggregated fields
GROUP BY sport, bmi_bucket
-- Sort by sport and then by athletes in descending order
ORDER BY sport, athletes DESC;


----------------------------------------------------------------------------------------------------

Troubleshooting CASE statements
In the previous exercise, you may have noticed several null values in our case statement, which can indicate there is an issue with the code.

In these instances, it's worth investigating to understand why these null values are appearing. In this exercise, you will go through a series of steps to identify the issue 
and make changes to the code where necessary.


-- Query from last exercise shown below.  Comment it out.
/* SELECT 
	sport,
    CASE WHEN weight/height^2*100 <.25 THEN '<.25'
    WHEN weight/height^2*100 <=.30 THEN '.25-.30'
    WHEN weight/height^2*100 >.30 THEN '>.30' END AS bmi_bucket,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
GROUP BY sport, bmi_bucket
ORDER BY sport, athletes DESC;
*/

-- Show height, weight, and bmi for all athletes
SELECT 
	height,
    weight,
    weight/height^2*100 AS bmi
FROM athletes
-- Filter for NULL bmi values
WHERE weight/height^2*100 is null;

from the output ->There are numerous null weight values, which will calculate null bmi values.

--
-- Uncomment the original query
SELECT 
	sport,
    CASE WHEN weight/height^2*100 <.25 THEN '<.25'
    WHEN weight/height^2*100 <=.30 THEN '.25-.30'
    WHEN weight/height^2*100 >.30 THEN '>.30'
    -- Add ELSE statement to output 'no weight recorded'
    ELSE 'no weight recorded' END AS bmi_bucket,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
GROUP BY sport, bmi_bucket
ORDER BY sport, athletes DESC;

----------------------------------------------------------------------------------------------------------------

Report 2: Top athletes in nobel-prized countries
It's time to bring together all the concepts brought up in this chapter to expand on your dashboard! Your next report to build is Report 2: 
Athletes Representing Nobel-Prize Winning Countries.

Report Details:

Column 1 should be event, which represents the Olympic event. Both summer and winter events should be included.
Column 2 should be gender, which represents the gender of athletes in the event.
Column 3 should be athletes, which represents the unique athletes in the event.
Athletes from countries that have had no nobel_prize_winners should be excluded.
The report should contain 10 events, where events with the most athletes show at the top

--Select event from the summer_games table and create the athletes field by counting the distinct number of athlete_id.
-- Pull event and unique athletes from summer_games 
SELECT 	
	event,
	count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY event;


--Explore the event field to determine how to split up events by gender (without adding a join), 
then add the gender field by using a CASE statement that specifies a conditional for 'female' events (all other events should output as 'male').

-- Pull event and unique athletes from summer_games 
SELECT 
	event, 
    -- Add the gender field below
    CASE WHEN event like '%Men%' then 'male'
    ELSE 'female' end AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
GROUP BY event;

--Filter for Nobel-prize-winning countries by creating a subquery that outputs country_id from the country_stats table for any country with more than zero nobel_prize_winners.
-- Pull event and unique athletes from summer_games 
SELECT 
    event,
    -- Add the gender field below
    CASE WHEN event LIKE '%Women%' THEN 'female' 
    ELSE 'male' END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
-- Only include countries that won a nobel prize
WHERE country_id IN 
	(SELECT country_id
    FROM country_stats
    WHERE nobel_prize_winners >0)
GROUP BY event;

--Copy your query with summer_games replaced by winter_games, UNION the two tables together, and order the final report to show the 10 rows with the most athletes.

-- Pull event and unique athletes from summer_games 
SELECT 
    event,
    -- Add the gender field below
    CASE WHEN event LIKE '%Women%' THEN 'female' 
    ELSE 'male' END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
-- Only include countries that won a nobel prize
WHERE country_id IN 
	(SELECT country_id 
    FROM country_stats 
    WHERE nobel_prize_winners > 0)
GROUP BY event
-- Add the second query below and combine with a UNION
UNION
SELECT 
    event,
    -- Add the gender field below
    CASE WHEN event LIKE '%Women%' THEN 'female' 
    ELSE 'male' END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM winter_games
-- Only include countries that won a nobel prize
WHERE country_id IN 
	(SELECT country_id 
    FROM country_stats 
    WHERE nobel_prize_winners > 0)
GROUP BY event

-- Order and limit the final output
ORDER BY athletes desc
LIMIT 10;









